'@timestamp':
  dashed_name: timestamp
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the
    event was generated by the source.

    If the event source has no original timestamp, this value is typically populated
    by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
  flat_name: '@timestamp'
  level: core
  name: '@timestamp'
  normalize: []
  required: true
  short: Date/time when the event originated.
  type: date
agent.build.original:
  dashed_name: agent-build-original
  description: 'Extended build information for the agent.

    This field is intended to contain any build information that a data source may
    provide, no specific formatting is required.'
  example: metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c
    built 2020-02-05 23:10:10 +0000 UTC]
  flat_name: agent.build.original
  ignore_above: 1024
  level: core
  name: build.original
  normalize: []
  short: Extended build information for the agent.
  type: keyword
agent.ephemeral_id:
  dashed_name: agent-ephemeral-id
  description: 'Ephemeral identifier of this agent (if one exists).

    This id normally changes across restarts, but `agent.id` does not.'
  example: 8a4f500f
  flat_name: agent.ephemeral_id
  ignore_above: 1024
  level: extended
  name: ephemeral_id
  normalize: []
  short: Ephemeral identifier of this agent.
  type: keyword
agent.id:
  dashed_name: agent-id
  description: 'Unique identifier of this agent (if one exists).

    Example: For Beats this would be beat.id.'
  example: 8a4f500d
  flat_name: agent.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique identifier of this agent.
  type: keyword
agent.name:
  dashed_name: agent-name
  description: 'Custom name of the agent.

    This is a name that can be given to an agent. This can be helpful if for example
    two Filebeat instances are running on the same host but a human readable separation
    is needed on which Filebeat instance data is coming from.

    If no name is given, the name is often left empty.'
  example: foo
  flat_name: agent.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Custom name of the agent.
  type: keyword
agent.type:
  dashed_name: agent-type
  description: 'Type of the agent.

    The agent type always stays the same and should be given by the agent used. In
    case of Filebeat the agent would always be Filebeat also if two Filebeat instances
    are run on the same machine.'
  example: filebeat
  flat_name: agent.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  short: Type of the agent.
  type: keyword
agent.version:
  dashed_name: agent-version
  description: Version of the agent.
  example: 6.0.0-rc2
  flat_name: agent.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  short: Version of the agent.
  type: keyword
cloud.account.id:
  dashed_name: cloud-account-id
  description: 'The cloud account or organization id used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
  example: 666777888999
  flat_name: cloud.account.id
  ignore_above: 1024
  level: extended
  name: account.id
  normalize: []
  short: The cloud account or organization id.
  type: keyword
cloud.account.name:
  dashed_name: cloud-account-name
  description: 'The cloud account name or alias used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account name, Google Cloud ORG display name.'
  example: elastic-dev
  flat_name: cloud.account.name
  ignore_above: 1024
  level: extended
  name: account.name
  normalize: []
  short: The cloud account name.
  type: keyword
cloud.availability_zone:
  dashed_name: cloud-availability-zone
  description: Availability zone in which this host, resource, or service is located.
  example: us-east-1c
  flat_name: cloud.availability_zone
  ignore_above: 1024
  level: extended
  name: availability_zone
  normalize: []
  short: Availability zone in which this host, resource, or service is located.
  type: keyword
cloud.instance.id:
  dashed_name: cloud-instance-id
  description: Instance ID of the host machine.
  example: i-1234567890abcdef0
  flat_name: cloud.instance.id
  ignore_above: 1024
  level: extended
  name: instance.id
  normalize: []
  short: Instance ID of the host machine.
  type: keyword
cloud.instance.name:
  dashed_name: cloud-instance-name
  description: Instance name of the host machine.
  flat_name: cloud.instance.name
  ignore_above: 1024
  level: extended
  name: instance.name
  normalize: []
  short: Instance name of the host machine.
  type: keyword
cloud.machine.type:
  dashed_name: cloud-machine-type
  description: Machine type of the host machine.
  example: t2.medium
  flat_name: cloud.machine.type
  ignore_above: 1024
  level: extended
  name: machine.type
  normalize: []
  short: Machine type of the host machine.
  type: keyword
cloud.origin.account.id:
  dashed_name: cloud-origin-account-id
  description: 'The cloud account or organization id used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
  example: 666777888999
  flat_name: cloud.origin.account.id
  ignore_above: 1024
  level: extended
  name: account.id
  normalize: []
  original_fieldset: cloud
  short: The cloud account or organization id.
  type: keyword
cloud.origin.account.name:
  dashed_name: cloud-origin-account-name
  description: 'The cloud account name or alias used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account name, Google Cloud ORG display name.'
  example: elastic-dev
  flat_name: cloud.origin.account.name
  ignore_above: 1024
  level: extended
  name: account.name
  normalize: []
  original_fieldset: cloud
  short: The cloud account name.
  type: keyword
cloud.origin.availability_zone:
  dashed_name: cloud-origin-availability-zone
  description: Availability zone in which this host, resource, or service is located.
  example: us-east-1c
  flat_name: cloud.origin.availability_zone
  ignore_above: 1024
  level: extended
  name: availability_zone
  normalize: []
  original_fieldset: cloud
  short: Availability zone in which this host, resource, or service is located.
  type: keyword
cloud.origin.instance.id:
  dashed_name: cloud-origin-instance-id
  description: Instance ID of the host machine.
  example: i-1234567890abcdef0
  flat_name: cloud.origin.instance.id
  ignore_above: 1024
  level: extended
  name: instance.id
  normalize: []
  original_fieldset: cloud
  short: Instance ID of the host machine.
  type: keyword
cloud.origin.instance.name:
  dashed_name: cloud-origin-instance-name
  description: Instance name of the host machine.
  flat_name: cloud.origin.instance.name
  ignore_above: 1024
  level: extended
  name: instance.name
  normalize: []
  original_fieldset: cloud
  short: Instance name of the host machine.
  type: keyword
cloud.origin.machine.type:
  dashed_name: cloud-origin-machine-type
  description: Machine type of the host machine.
  example: t2.medium
  flat_name: cloud.origin.machine.type
  ignore_above: 1024
  level: extended
  name: machine.type
  normalize: []
  original_fieldset: cloud
  short: Machine type of the host machine.
  type: keyword
cloud.origin.project.id:
  dashed_name: cloud-origin-project-id
  description: 'The cloud project identifier.

    Examples: Google Cloud Project id, Azure Project id.'
  example: my-project
  flat_name: cloud.origin.project.id
  ignore_above: 1024
  level: extended
  name: project.id
  normalize: []
  original_fieldset: cloud
  short: The cloud project id.
  type: keyword
cloud.origin.project.name:
  dashed_name: cloud-origin-project-name
  description: 'The cloud project name.

    Examples: Google Cloud Project name, Azure Project name.'
  example: my project
  flat_name: cloud.origin.project.name
  ignore_above: 1024
  level: extended
  name: project.name
  normalize: []
  original_fieldset: cloud
  short: The cloud project name.
  type: keyword
cloud.origin.provider:
  dashed_name: cloud-origin-provider
  description: Name of the cloud provider. Example values are aws, azure, gcp, or
    digitalocean.
  example: aws
  flat_name: cloud.origin.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  original_fieldset: cloud
  short: Name of the cloud provider.
  type: keyword
cloud.origin.region:
  dashed_name: cloud-origin-region
  description: Region in which this host, resource, or service is located.
  example: us-east-1
  flat_name: cloud.origin.region
  ignore_above: 1024
  level: extended
  name: region
  normalize: []
  original_fieldset: cloud
  short: Region in which this host, resource, or service is located.
  type: keyword
cloud.origin.service.name:
  dashed_name: cloud-origin-service-name
  description: 'The cloud service name is intended to distinguish services running
    on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App
    Engine, Azure VM vs App Server.

    Examples: app engine, app service, cloud run, fargate, lambda.'
  example: lambda
  flat_name: cloud.origin.service.name
  ignore_above: 1024
  level: extended
  name: service.name
  normalize: []
  original_fieldset: cloud
  short: The cloud service name.
  type: keyword
cloud.project.id:
  dashed_name: cloud-project-id
  description: 'The cloud project identifier.

    Examples: Google Cloud Project id, Azure Project id.'
  example: my-project
  flat_name: cloud.project.id
  ignore_above: 1024
  level: extended
  name: project.id
  normalize: []
  short: The cloud project id.
  type: keyword
cloud.project.name:
  dashed_name: cloud-project-name
  description: 'The cloud project name.

    Examples: Google Cloud Project name, Azure Project name.'
  example: my project
  flat_name: cloud.project.name
  ignore_above: 1024
  level: extended
  name: project.name
  normalize: []
  short: The cloud project name.
  type: keyword
cloud.provider:
  dashed_name: cloud-provider
  description: Name of the cloud provider. Example values are aws, azure, gcp, or
    digitalocean.
  example: aws
  flat_name: cloud.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  short: Name of the cloud provider.
  type: keyword
cloud.region:
  dashed_name: cloud-region
  description: Region in which this host, resource, or service is located.
  example: us-east-1
  flat_name: cloud.region
  ignore_above: 1024
  level: extended
  name: region
  normalize: []
  short: Region in which this host, resource, or service is located.
  type: keyword
cloud.service.name:
  dashed_name: cloud-service-name
  description: 'The cloud service name is intended to distinguish services running
    on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App
    Engine, Azure VM vs App Server.

    Examples: app engine, app service, cloud run, fargate, lambda.'
  example: lambda
  flat_name: cloud.service.name
  ignore_above: 1024
  level: extended
  name: service.name
  normalize: []
  short: The cloud service name.
  type: keyword
cloud.target.account.id:
  dashed_name: cloud-target-account-id
  description: 'The cloud account or organization id used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
  example: 666777888999
  flat_name: cloud.target.account.id
  ignore_above: 1024
  level: extended
  name: account.id
  normalize: []
  original_fieldset: cloud
  short: The cloud account or organization id.
  type: keyword
cloud.target.account.name:
  dashed_name: cloud-target-account-name
  description: 'The cloud account name or alias used to identify different entities
    in a multi-tenant environment.

    Examples: AWS account name, Google Cloud ORG display name.'
  example: elastic-dev
  flat_name: cloud.target.account.name
  ignore_above: 1024
  level: extended
  name: account.name
  normalize: []
  original_fieldset: cloud
  short: The cloud account name.
  type: keyword
cloud.target.availability_zone:
  dashed_name: cloud-target-availability-zone
  description: Availability zone in which this host, resource, or service is located.
  example: us-east-1c
  flat_name: cloud.target.availability_zone
  ignore_above: 1024
  level: extended
  name: availability_zone
  normalize: []
  original_fieldset: cloud
  short: Availability zone in which this host, resource, or service is located.
  type: keyword
cloud.target.instance.id:
  dashed_name: cloud-target-instance-id
  description: Instance ID of the host machine.
  example: i-1234567890abcdef0
  flat_name: cloud.target.instance.id
  ignore_above: 1024
  level: extended
  name: instance.id
  normalize: []
  original_fieldset: cloud
  short: Instance ID of the host machine.
  type: keyword
cloud.target.instance.name:
  dashed_name: cloud-target-instance-name
  description: Instance name of the host machine.
  flat_name: cloud.target.instance.name
  ignore_above: 1024
  level: extended
  name: instance.name
  normalize: []
  original_fieldset: cloud
  short: Instance name of the host machine.
  type: keyword
cloud.target.machine.type:
  dashed_name: cloud-target-machine-type
  description: Machine type of the host machine.
  example: t2.medium
  flat_name: cloud.target.machine.type
  ignore_above: 1024
  level: extended
  name: machine.type
  normalize: []
  original_fieldset: cloud
  short: Machine type of the host machine.
  type: keyword
cloud.target.project.id:
  dashed_name: cloud-target-project-id
  description: 'The cloud project identifier.

    Examples: Google Cloud Project id, Azure Project id.'
  example: my-project
  flat_name: cloud.target.project.id
  ignore_above: 1024
  level: extended
  name: project.id
  normalize: []
  original_fieldset: cloud
  short: The cloud project id.
  type: keyword
cloud.target.project.name:
  dashed_name: cloud-target-project-name
  description: 'The cloud project name.

    Examples: Google Cloud Project name, Azure Project name.'
  example: my project
  flat_name: cloud.target.project.name
  ignore_above: 1024
  level: extended
  name: project.name
  normalize: []
  original_fieldset: cloud
  short: The cloud project name.
  type: keyword
cloud.target.provider:
  dashed_name: cloud-target-provider
  description: Name of the cloud provider. Example values are aws, azure, gcp, or
    digitalocean.
  example: aws
  flat_name: cloud.target.provider
  ignore_above: 1024
  level: extended
  name: provider
  normalize: []
  original_fieldset: cloud
  short: Name of the cloud provider.
  type: keyword
cloud.target.region:
  dashed_name: cloud-target-region
  description: Region in which this host, resource, or service is located.
  example: us-east-1
  flat_name: cloud.target.region
  ignore_above: 1024
  level: extended
  name: region
  normalize: []
  original_fieldset: cloud
  short: Region in which this host, resource, or service is located.
  type: keyword
cloud.target.service.name:
  dashed_name: cloud-target-service-name
  description: 'The cloud service name is intended to distinguish services running
    on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App
    Engine, Azure VM vs App Server.

    Examples: app engine, app service, cloud run, fargate, lambda.'
  example: lambda
  flat_name: cloud.target.service.name
  ignore_above: 1024
  level: extended
  name: service.name
  normalize: []
  original_fieldset: cloud
  short: The cloud service name.
  type: keyword
container.id:
  dashed_name: container-id
  description: Unique container id.
  flat_name: container.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique container id.
  type: keyword
container.image.name:
  dashed_name: container-image-name
  description: Name of the image the container was built on.
  flat_name: container.image.name
  ignore_above: 1024
  level: extended
  name: image.name
  normalize: []
  short: Name of the image the container was built on.
  type: keyword
container.image.tag:
  dashed_name: container-image-tag
  description: Container image tags.
  flat_name: container.image.tag
  ignore_above: 1024
  level: extended
  name: image.tag
  normalize:
  - array
  short: Container image tags.
  type: keyword
container.labels:
  dashed_name: container-labels
  description: Image labels.
  flat_name: container.labels
  level: extended
  name: labels
  normalize: []
  object_type: keyword
  short: Image labels.
  type: object
container.name:
  dashed_name: container-name
  description: Container name.
  flat_name: container.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  short: Container name.
  type: keyword
container.runtime:
  dashed_name: container-runtime
  description: Runtime managing this container.
  example: docker
  flat_name: container.runtime
  ignore_above: 1024
  level: extended
  name: runtime
  normalize: []
  short: Runtime managing this container.
  type: keyword
data_stream.dataset:
  dashed_name: data-stream-dataset
  description: "The field can contain anything that makes sense to signify the source\
    \ of the data.\nExamples include `nginx.access`, `prometheus`, `endpoint` etc.\
    \ For data streams that otherwise fit, but that do not have dataset set we use\
    \ the value \"generic\" for the dataset value. `event.dataset` should have the\
    \ same value as `data_stream.dataset`.\nBeyond the Elasticsearch data stream naming\
    \ criteria noted above, the `dataset` value has additional restrictions:\n  *\
    \ Must not contain `-`\n  * No longer than 100 characters"
  example: nginx.access
  flat_name: data_stream.dataset
  level: extended
  name: dataset
  normalize: []
  short: The field can contain anything that makes sense to signify the source of
    the data.
  type: constant_keyword
data_stream.namespace:
  dashed_name: data-stream-namespace
  description: "A user defined namespace. Namespaces are useful to allow grouping\
    \ of data.\nMany users already organize their indices this way, and the data stream\
    \ naming scheme now provides this best practice as a default. Many users will\
    \ populate this field with `default`. If no value is used, it falls back to `default`.\n\
    Beyond the Elasticsearch index naming criteria noted above, `namespace` value\
    \ has the additional restrictions:\n  * Must not contain `-`\n  * No longer than\
    \ 100 characters"
  example: production
  flat_name: data_stream.namespace
  level: extended
  name: namespace
  normalize: []
  short: A user defined namespace. Namespaces are useful to allow grouping of data.
  type: constant_keyword
data_stream.type:
  dashed_name: data-stream-type
  description: 'An overarching type for the data stream.

    Currently allowed values are "logs" and "metrics". We expect to also add "traces"
    and "synthetics" in the near future.'
  example: logs
  flat_name: data_stream.type
  level: extended
  name: type
  normalize: []
  short: An overarching type for the data stream.
  type: constant_keyword
host.architecture:
  dashed_name: host-architecture
  description: Operating system architecture.
  example: x86_64
  flat_name: host.architecture
  ignore_above: 1024
  level: core
  name: architecture
  normalize: []
  short: Operating system architecture.
  type: keyword
host.cpu.usage:
  dashed_name: host-cpu-usage
  description: 'Percent CPU used which is normalized by the number of CPU cores and
    it ranges from 0 to 1.

    Scaling factor: 1000.

    For example: For a two core host, this value should be the average of the two
    cores, between 0 and 1.'
  flat_name: host.cpu.usage
  level: extended
  name: cpu.usage
  normalize: []
  scaling_factor: 1000
  short: Percent CPU used, between 0 and 1.
  type: scaled_float
host.disk.read.bytes:
  dashed_name: host-disk-read-bytes
  description: The total number of bytes (gauge) read successfully (aggregated from
    all disks) since the last metric collection.
  flat_name: host.disk.read.bytes
  level: extended
  name: disk.read.bytes
  normalize: []
  short: The number of bytes read by all disks.
  type: long
host.disk.write.bytes:
  dashed_name: host-disk-write-bytes
  description: The total number of bytes (gauge) written successfully (aggregated
    from all disks) since the last metric collection.
  flat_name: host.disk.write.bytes
  level: extended
  name: disk.write.bytes
  normalize: []
  short: The number of bytes written on all disks.
  type: long
host.domain:
  dashed_name: host-domain
  description: 'Name of the domain of which the host is a member.

    For example, on Windows this could be the host''s Active Directory domain or NetBIOS
    domain name. For Linux this could be the domain of the host''s LDAP provider.'
  example: CONTOSO
  flat_name: host.domain
  ignore_above: 1024
  level: extended
  name: domain
  normalize: []
  short: Name of the directory the group is a member of.
  type: keyword
host.geo.city_name:
  dashed_name: host-geo-city-name
  description: City name.
  example: Montreal
  flat_name: host.geo.city_name
  ignore_above: 1024
  level: core
  name: city_name
  normalize: []
  original_fieldset: geo
  short: City name.
  type: keyword
host.geo.continent_code:
  dashed_name: host-geo-continent-code
  description: Two-letter code representing continent's name.
  example: NA
  flat_name: host.geo.continent_code
  ignore_above: 1024
  level: core
  name: continent_code
  normalize: []
  original_fieldset: geo
  short: Continent code.
  type: keyword
host.geo.continent_name:
  dashed_name: host-geo-continent-name
  description: Name of the continent.
  example: North America
  flat_name: host.geo.continent_name
  ignore_above: 1024
  level: core
  name: continent_name
  normalize: []
  original_fieldset: geo
  short: Name of the continent.
  type: keyword
host.geo.country_iso_code:
  dashed_name: host-geo-country-iso-code
  description: Country ISO code.
  example: CA
  flat_name: host.geo.country_iso_code
  ignore_above: 1024
  level: core
  name: country_iso_code
  normalize: []
  original_fieldset: geo
  short: Country ISO code.
  type: keyword
host.geo.country_name:
  dashed_name: host-geo-country-name
  description: Country name.
  example: Canada
  flat_name: host.geo.country_name
  ignore_above: 1024
  level: core
  name: country_name
  normalize: []
  original_fieldset: geo
  short: Country name.
  type: keyword
host.geo.location:
  dashed_name: host-geo-location
  description: Longitude and latitude.
  example: '{ "lon": -73.614830, "lat": 45.505918 }'
  flat_name: host.geo.location
  level: core
  name: location
  normalize: []
  original_fieldset: geo
  short: Longitude and latitude.
  type: geo_point
host.geo.name:
  dashed_name: host-geo-name
  description: 'User-defined description of a location, at the level of granularity
    they care about.

    Could be the name of their data centers, the floor number, if this describes a
    local physical entity, city names.

    Not typically used in automated geolocation.'
  example: boston-dc
  flat_name: host.geo.name
  ignore_above: 1024
  level: extended
  name: name
  normalize: []
  original_fieldset: geo
  short: User-defined description of a location.
  type: keyword
host.geo.postal_code:
  dashed_name: host-geo-postal-code
  description: 'Postal code associated with the location.

    Values appropriate for this field may also be known as a postcode or ZIP code
    and will vary widely from country to country.'
  example: 94040
  flat_name: host.geo.postal_code
  ignore_above: 1024
  level: core
  name: postal_code
  normalize: []
  original_fieldset: geo
  short: Postal code.
  type: keyword
host.geo.region_iso_code:
  dashed_name: host-geo-region-iso-code
  description: Region ISO code.
  example: CA-QC
  flat_name: host.geo.region_iso_code
  ignore_above: 1024
  level: core
  name: region_iso_code
  normalize: []
  original_fieldset: geo
  short: Region ISO code.
  type: keyword
host.geo.region_name:
  dashed_name: host-geo-region-name
  description: Region name.
  example: Quebec
  flat_name: host.geo.region_name
  ignore_above: 1024
  level: core
  name: region_name
  normalize: []
  original_fieldset: geo
  short: Region name.
  type: keyword
host.geo.timezone:
  dashed_name: host-geo-timezone
  description: The time zone of the location, such as IANA time zone name.
  example: America/Argentina/Buenos_Aires
  flat_name: host.geo.timezone
  ignore_above: 1024
  level: core
  name: timezone
  normalize: []
  original_fieldset: geo
  short: Time zone.
  type: keyword
host.hostname:
  dashed_name: host-hostname
  description: 'Hostname of the host.

    It normally contains what the `hostname` command returns on the host machine.'
  flat_name: host.hostname
  ignore_above: 1024
  level: core
  name: hostname
  normalize: []
  short: Hostname of the host.
  type: keyword
host.id:
  dashed_name: host-id
  description: 'Unique host id.

    As hostname is not always unique, use values that are meaningful in your environment.

    Example: The current usage of `beat.name`.'
  flat_name: host.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique host id.
  type: keyword
host.ip:
  dashed_name: host-ip
  description: Host ip addresses.
  flat_name: host.ip
  level: core
  name: ip
  normalize:
  - array
  short: Host ip addresses.
  type: ip
host.mac:
  dashed_name: host-mac
  description: 'Host MAC addresses.

    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte)
    is represented by two [uppercase] hexadecimal digits giving the value of the octet
    as an unsigned integer. Successive octets are separated by a hyphen.'
  example: '["00-00-5E-00-53-23", "00-00-5E-00-53-24"]'
  flat_name: host.mac
  ignore_above: 1024
  level: core
  name: mac
  normalize:
  - array
  short: Host MAC addresses.
  type: keyword
host.name:
  dashed_name: host-name
  description: 'Name of the host.

    It can contain what `hostname` returns on Unix systems, the fully qualified domain
    name, or a name specified by the user. The sender decides which value to use.'
  flat_name: host.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Name of the host.
  type: keyword
host.network.egress.bytes:
  dashed_name: host-network-egress-bytes
  description: The number of bytes (gauge) sent out on all network interfaces by the
    host since the last metric collection.
  flat_name: host.network.egress.bytes
  level: extended
  name: network.egress.bytes
  normalize: []
  short: The number of bytes sent on all network interfaces.
  type: long
host.network.egress.packets:
  dashed_name: host-network-egress-packets
  description: The number of packets (gauge) sent out on all network interfaces by
    the host since the last metric collection.
  flat_name: host.network.egress.packets
  level: extended
  name: network.egress.packets
  normalize: []
  short: The number of packets sent on all network interfaces.
  type: long
host.network.ingress.bytes:
  dashed_name: host-network-ingress-bytes
  description: The number of bytes received (gauge) on all network interfaces by the
    host since the last metric collection.
  flat_name: host.network.ingress.bytes
  level: extended
  name: network.ingress.bytes
  normalize: []
  short: The number of bytes received on all network interfaces.
  type: long
host.network.ingress.packets:
  dashed_name: host-network-ingress-packets
  description: The number of packets (gauge) received on all network interfaces by
    the host since the last metric collection.
  flat_name: host.network.ingress.packets
  level: extended
  name: network.ingress.packets
  normalize: []
  short: The number of packets received on all network interfaces.
  type: long
host.os.family:
  dashed_name: host-os-family
  description: OS family (such as redhat, debian, freebsd, windows).
  example: debian
  flat_name: host.os.family
  ignore_above: 1024
  level: extended
  name: family
  normalize: []
  original_fieldset: os
  short: OS family (such as redhat, debian, freebsd, windows).
  type: keyword
host.os.full:
  dashed_name: host-os-full
  description: Operating system name, including the version or code name.
  example: Mac OS Mojave
  flat_name: host.os.full
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: host.os.full.text
    name: text
    type: match_only_text
  name: full
  normalize: []
  original_fieldset: os
  short: Operating system name, including the version or code name.
  type: keyword
host.os.kernel:
  dashed_name: host-os-kernel
  description: Operating system kernel version as a raw string.
  example: 4.4.0-112-generic
  flat_name: host.os.kernel
  ignore_above: 1024
  level: extended
  name: kernel
  normalize: []
  original_fieldset: os
  short: Operating system kernel version as a raw string.
  type: keyword
host.os.name:
  dashed_name: host-os-name
  description: Operating system name, without the version.
  example: Mac OS X
  flat_name: host.os.name
  ignore_above: 1024
  level: extended
  multi_fields:
  - flat_name: host.os.name.text
    name: text
    type: match_only_text
  name: name
  normalize: []
  original_fieldset: os
  short: Operating system name, without the version.
  type: keyword
host.os.platform:
  dashed_name: host-os-platform
  description: Operating system platform (such centos, ubuntu, windows).
  example: darwin
  flat_name: host.os.platform
  ignore_above: 1024
  level: extended
  name: platform
  normalize: []
  original_fieldset: os
  short: Operating system platform (such centos, ubuntu, windows).
  type: keyword
host.os.type:
  dashed_name: host-os-type
  description: 'Use the `os.type` field to categorize the operating system into one
    of the broad commercial families.

    One of these following values should be used (lowercase): linux, macos, unix,
    windows.

    If the OS you''re dealing with is not in the list, the field should not be populated.
    Please let us know by opening an issue with ECS, to propose its addition.'
  example: macos
  flat_name: host.os.type
  ignore_above: 1024
  level: extended
  name: type
  normalize: []
  original_fieldset: os
  short: 'Which commercial OS family (one of: linux, macos, unix or windows).'
  type: keyword
host.os.version:
  dashed_name: host-os-version
  description: Operating system version as a raw string.
  example: 10.14.1
  flat_name: host.os.version
  ignore_above: 1024
  level: extended
  name: version
  normalize: []
  original_fieldset: os
  short: Operating system version as a raw string.
  type: keyword
host.type:
  dashed_name: host-type
  description: 'Type of host.

    For Cloud providers this can be the machine type like `t2.medium`. If vm, this
    could be the container, for example, or other information meaningful in your environment.'
  flat_name: host.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  short: Type of host.
  type: keyword
host.uptime:
  dashed_name: host-uptime
  description: Seconds the host has been up.
  example: 1325
  flat_name: host.uptime
  level: extended
  name: uptime
  normalize: []
  short: Seconds the host has been up.
  type: long
http.request.body.bytes:
  dashed_name: http-request-body-bytes
  description: Size in bytes of the request body.
  example: 887
  flat_name: http.request.body.bytes
  format: bytes
  level: extended
  name: request.body.bytes
  normalize: []
  short: Size in bytes of the request body.
  type: long
http.request.body.content:
  dashed_name: http-request-body-content
  description: The full HTTP request body.
  example: Hello world
  flat_name: http.request.body.content
  level: extended
  multi_fields:
  - flat_name: http.request.body.content.text
    name: text
    type: match_only_text
  name: request.body.content
  normalize: []
  short: The full HTTP request body.
  type: wildcard
http.request.bytes:
  dashed_name: http-request-bytes
  description: Total size in bytes of the request (body and headers).
  example: 1437
  flat_name: http.request.bytes
  format: bytes
  level: extended
  name: request.bytes
  normalize: []
  short: Total size in bytes of the request (body and headers).
  type: long
http.request.id:
  dashed_name: http-request-id
  description: 'A unique identifier for each HTTP request to correlate logs between
    clients and servers in transactions.

    The id may be contained in a non-standard HTTP header, such as `X-Request-ID`
    or `X-Correlation-ID`.'
  example: 123e4567-e89b-12d3-a456-426614174000
  flat_name: http.request.id
  ignore_above: 1024
  level: extended
  name: request.id
  normalize: []
  short: HTTP request ID.
  type: keyword
http.request.method:
  dashed_name: http-request-method
  description: 'HTTP request method.

    The value should retain its casing from the original event. For example, `GET`,
    `get`, and `GeT` are all considered valid values for this field.'
  example: POST
  flat_name: http.request.method
  ignore_above: 1024
  level: extended
  name: request.method
  normalize: []
  short: HTTP request method.
  type: keyword
http.request.mime_type:
  dashed_name: http-request-mime-type
  description: 'Mime type of the body of the request.

    This value must only be populated based on the content of the request body, not
    on the `Content-Type` header. Comparing the mime type of a request with the request''s
    Content-Type header can be helpful in detecting threats or misconfigured clients.'
  example: image/gif
  flat_name: http.request.mime_type
  ignore_above: 1024
  level: extended
  name: request.mime_type
  normalize: []
  short: Mime type of the body of the request.
  type: keyword
http.request.referrer:
  dashed_name: http-request-referrer
  description: Referrer for this HTTP request.
  example: https://blog.example.com/
  flat_name: http.request.referrer
  ignore_above: 1024
  level: extended
  name: request.referrer
  normalize: []
  short: Referrer for this HTTP request.
  type: keyword
http.response.body.bytes:
  dashed_name: http-response-body-bytes
  description: Size in bytes of the response body.
  example: 887
  flat_name: http.response.body.bytes
  format: bytes
  level: extended
  name: response.body.bytes
  normalize: []
  short: Size in bytes of the response body.
  type: long
http.response.body.content:
  dashed_name: http-response-body-content
  description: The full HTTP response body.
  example: Hello world
  flat_name: http.response.body.content
  level: extended
  multi_fields:
  - flat_name: http.response.body.content.text
    name: text
    type: match_only_text
  name: response.body.content
  normalize: []
  short: The full HTTP response body.
  type: wildcard
http.response.bytes:
  dashed_name: http-response-bytes
  description: Total size in bytes of the response (body and headers).
  example: 1437
  flat_name: http.response.bytes
  format: bytes
  level: extended
  name: response.bytes
  normalize: []
  short: Total size in bytes of the response (body and headers).
  type: long
http.response.mime_type:
  dashed_name: http-response-mime-type
  description: 'Mime type of the body of the response.

    This value must only be populated based on the content of the response body, not
    on the `Content-Type` header. Comparing the mime type of a response with the response''s
    Content-Type header can be helpful in detecting misconfigured servers.'
  example: image/gif
  flat_name: http.response.mime_type
  ignore_above: 1024
  level: extended
  name: response.mime_type
  normalize: []
  short: Mime type of the body of the response.
  type: keyword
http.response.status_code:
  dashed_name: http-response-status-code
  description: HTTP response status code.
  example: 404
  flat_name: http.response.status_code
  format: string
  level: extended
  name: response.status_code
  normalize: []
  short: HTTP response status code.
  type: long
http.version:
  dashed_name: http-version
  description: HTTP version.
  example: 1.1
  flat_name: http.version
  ignore_above: 1024
  level: extended
  name: version
  normalize: []
  short: HTTP version.
  type: keyword
labels:
  dashed_name: labels
  description: 'Custom key/value pairs.

    Can be used to add meta information to events. Should not contain nested objects.
    All values are stored as keyword.

    Example: `docker` and `k8s` labels.'
  example: '{"application": "foo-bar", "env": "production"}'
  flat_name: labels
  level: core
  name: labels
  normalize: []
  object_type: keyword
  short: Custom key/value pairs.
  type: object
log.file.path:
  dashed_name: log-file-path
  description: 'Full path to the log file this event came from, including the file
    name. It should include the drive letter, when appropriate.

    If the event wasn''t read from a log file, do not populate this field.'
  example: /var/log/fun-times.log
  flat_name: log.file.path
  ignore_above: 1024
  level: extended
  name: file.path
  normalize: []
  short: Full path to the log file this event came from.
  type: keyword
log.level:
  dashed_name: log-level
  description: 'Original log level of the log event.

    If the source of the event provides a log level or textual severity, this is the
    one that goes in `log.level`. If your source doesn''t specify one, you may put
    your event transport''s severity here (e.g. Syslog severity).

    Some examples are `warn`, `err`, `i`, `informational`.'
  example: error
  flat_name: log.level
  ignore_above: 1024
  level: core
  name: level
  normalize: []
  short: Log level of the log event.
  type: keyword
log.logger:
  dashed_name: log-logger
  description: The name of the logger inside an application. This is usually the name
    of the class which initialized the logger, or can be a custom name.
  example: org.elasticsearch.bootstrap.Bootstrap
  flat_name: log.logger
  ignore_above: 1024
  level: core
  name: logger
  normalize: []
  short: Name of the logger.
  type: keyword
log.origin.file.line:
  dashed_name: log-origin-file-line
  description: The line number of the file containing the source code which originated
    the log event.
  example: 42
  flat_name: log.origin.file.line
  level: extended
  name: origin.file.line
  normalize: []
  short: The line number of the file which originated the log event.
  type: long
log.origin.file.name:
  dashed_name: log-origin-file-name
  description: 'The name of the file containing the source code which originated the
    log event.

    Note that this field is not meant to capture the log file. The correct field to
    capture the log file is `log.file.path`.'
  example: Bootstrap.java
  flat_name: log.origin.file.name
  ignore_above: 1024
  level: extended
  name: origin.file.name
  normalize: []
  short: The code file which originated the log event.
  type: keyword
log.origin.function:
  dashed_name: log-origin-function
  description: The name of the function or method which originated the log event.
  example: init
  flat_name: log.origin.function
  ignore_above: 1024
  level: extended
  name: origin.function
  normalize: []
  short: The function which originated the log event.
  type: keyword
log.syslog:
  dashed_name: log-syslog
  description: The Syslog metadata of the event, if the event was transmitted via
    Syslog. Please see RFCs 5424 or 3164.
  flat_name: log.syslog
  level: extended
  name: syslog
  normalize: []
  short: Syslog metadata
  type: object
log.syslog.facility.code:
  dashed_name: log-syslog-facility-code
  description: 'The Syslog numeric facility of the log event, if available.

    According to RFCs 5424 and 3164, this value should be an integer between 0 and
    23.'
  example: 23
  flat_name: log.syslog.facility.code
  format: string
  level: extended
  name: syslog.facility.code
  normalize: []
  short: Syslog numeric facility of the event.
  type: long
log.syslog.facility.name:
  dashed_name: log-syslog-facility-name
  description: The Syslog text-based facility of the log event, if available.
  example: local7
  flat_name: log.syslog.facility.name
  ignore_above: 1024
  level: extended
  name: syslog.facility.name
  normalize: []
  short: Syslog text-based facility of the event.
  type: keyword
log.syslog.priority:
  dashed_name: log-syslog-priority
  description: 'Syslog numeric priority of the event, if available.

    According to RFCs 5424 and 3164, the priority is 8 * facility + severity. This
    number is therefore expected to contain a value between 0 and 191.'
  example: 135
  flat_name: log.syslog.priority
  format: string
  level: extended
  name: syslog.priority
  normalize: []
  short: Syslog priority of the event.
  type: long
log.syslog.severity.code:
  dashed_name: log-syslog-severity-code
  description: 'The Syslog numeric severity of the log event, if available.

    If the event source publishing via Syslog provides a different numeric severity
    value (e.g. firewall, IDS), your source''s numeric severity should go to `event.severity`.
    If the event source does not specify a distinct severity, you can optionally copy
    the Syslog severity to `event.severity`.'
  example: 3
  flat_name: log.syslog.severity.code
  level: extended
  name: syslog.severity.code
  normalize: []
  short: Syslog numeric severity of the event.
  type: long
log.syslog.severity.name:
  dashed_name: log-syslog-severity-name
  description: 'The Syslog numeric severity of the log event, if available.

    If the event source publishing via Syslog provides a different severity value
    (e.g. firewall, IDS), your source''s text severity should go to `log.level`. If
    the event source does not specify a distinct severity, you can optionally copy
    the Syslog severity to `log.level`.'
  example: Error
  flat_name: log.syslog.severity.name
  ignore_above: 1024
  level: extended
  name: syslog.severity.name
  normalize: []
  short: Syslog text-based severity of the event.
  type: keyword
message:
  dashed_name: message
  description: 'For log events the message field contains the log message, optimized
    for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated
    to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World
  flat_name: message
  level: core
  name: message
  normalize: []
  short: Log message optimized for viewing in a log viewer.
  type: match_only_text
service.address:
  dashed_name: service-address
  description: 'Address where data about this service was collected from.

    This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource
    path (sockets).'
  example: 172.26.0.2:5432
  flat_name: service.address
  ignore_above: 1024
  level: extended
  name: address
  normalize: []
  short: Address of this service.
  type: keyword
service.environment:
  beta: This field is beta and subject to change.
  dashed_name: service-environment
  description: 'Identifies the environment where the service is running.

    If the same service runs in different environments (production, staging, QA, development,
    etc.), the environment can identify other instances of the same service. Can also
    group services and applications from the same environment.'
  example: production
  flat_name: service.environment
  ignore_above: 1024
  level: extended
  name: environment
  normalize: []
  short: Environment of the service.
  type: keyword
service.ephemeral_id:
  dashed_name: service-ephemeral-id
  description: 'Ephemeral identifier of this service (if one exists).

    This id normally changes across restarts, but `service.id` does not.'
  example: 8a4f500f
  flat_name: service.ephemeral_id
  ignore_above: 1024
  level: extended
  name: ephemeral_id
  normalize: []
  short: Ephemeral identifier of this service.
  type: keyword
service.id:
  dashed_name: service-id
  description: 'Unique identifier of the running service. If the service is comprised
    of many nodes, the `service.id` should be the same for all nodes.

    This id should uniquely identify the service. This makes it possible to correlate
    logs and metrics for one specific service, no matter which particular node emitted
    the event.

    Note that if you need to see the events from one specific host of the service,
    you should filter on that `host.name` or `host.id` instead.'
  example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
  flat_name: service.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  short: Unique identifier of the running service.
  type: keyword
service.name:
  dashed_name: service-name
  description: 'Name of the service data is collected from.

    The name of the service is normally user given. This allows for distributed services
    that run on multiple hosts to correlate the related instances based on the name.

    In the case of Elasticsearch the `service.name` could contain the cluster name.
    For Beats the `service.name` is by default a copy of the `service.type` field
    if no name is specified.'
  example: elasticsearch-metrics
  flat_name: service.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  short: Name of the service.
  type: keyword
service.node.name:
  dashed_name: service-node-name
  description: 'Name of a service node.

    This allows for two nodes of the same service running on the same host to be differentiated.
    Therefore, `service.node.name` should typically be unique across nodes of a given
    service.

    In the case of Elasticsearch, the `service.node.name` could contain the unique
    node name within the Elasticsearch cluster. In cases where the service doesn''t
    have the concept of a node name, the host name or container name can be used to
    distinguish running instances that make up this service. If those do not provide
    uniqueness (e.g. multiple instances of the service running on the same host) -
    the node name can be manually set.'
  example: instance-0000000016
  flat_name: service.node.name
  ignore_above: 1024
  level: extended
  name: node.name
  normalize: []
  short: Name of the service node.
  type: keyword
service.origin.address:
  dashed_name: service-origin-address
  description: 'Address where data about this service was collected from.

    This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource
    path (sockets).'
  example: 172.26.0.2:5432
  flat_name: service.origin.address
  ignore_above: 1024
  level: extended
  name: address
  normalize: []
  original_fieldset: service
  short: Address of this service.
  type: keyword
service.origin.environment:
  beta: This field is beta and subject to change.
  dashed_name: service-origin-environment
  description: 'Identifies the environment where the service is running.

    If the same service runs in different environments (production, staging, QA, development,
    etc.), the environment can identify other instances of the same service. Can also
    group services and applications from the same environment.'
  example: production
  flat_name: service.origin.environment
  ignore_above: 1024
  level: extended
  name: environment
  normalize: []
  original_fieldset: service
  short: Environment of the service.
  type: keyword
service.origin.ephemeral_id:
  dashed_name: service-origin-ephemeral-id
  description: 'Ephemeral identifier of this service (if one exists).

    This id normally changes across restarts, but `service.id` does not.'
  example: 8a4f500f
  flat_name: service.origin.ephemeral_id
  ignore_above: 1024
  level: extended
  name: ephemeral_id
  normalize: []
  original_fieldset: service
  short: Ephemeral identifier of this service.
  type: keyword
service.origin.id:
  dashed_name: service-origin-id
  description: 'Unique identifier of the running service. If the service is comprised
    of many nodes, the `service.id` should be the same for all nodes.

    This id should uniquely identify the service. This makes it possible to correlate
    logs and metrics for one specific service, no matter which particular node emitted
    the event.

    Note that if you need to see the events from one specific host of the service,
    you should filter on that `host.name` or `host.id` instead.'
  example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
  flat_name: service.origin.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  original_fieldset: service
  short: Unique identifier of the running service.
  type: keyword
service.origin.name:
  dashed_name: service-origin-name
  description: 'Name of the service data is collected from.

    The name of the service is normally user given. This allows for distributed services
    that run on multiple hosts to correlate the related instances based on the name.

    In the case of Elasticsearch the `service.name` could contain the cluster name.
    For Beats the `service.name` is by default a copy of the `service.type` field
    if no name is specified.'
  example: elasticsearch-metrics
  flat_name: service.origin.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  original_fieldset: service
  short: Name of the service.
  type: keyword
service.origin.node.name:
  dashed_name: service-origin-node-name
  description: 'Name of a service node.

    This allows for two nodes of the same service running on the same host to be differentiated.
    Therefore, `service.node.name` should typically be unique across nodes of a given
    service.

    In the case of Elasticsearch, the `service.node.name` could contain the unique
    node name within the Elasticsearch cluster. In cases where the service doesn''t
    have the concept of a node name, the host name or container name can be used to
    distinguish running instances that make up this service. If those do not provide
    uniqueness (e.g. multiple instances of the service running on the same host) -
    the node name can be manually set.'
  example: instance-0000000016
  flat_name: service.origin.node.name
  ignore_above: 1024
  level: extended
  name: node.name
  normalize: []
  original_fieldset: service
  short: Name of the service node.
  type: keyword
service.origin.state:
  dashed_name: service-origin-state
  description: Current state of the service.
  flat_name: service.origin.state
  ignore_above: 1024
  level: core
  name: state
  normalize: []
  original_fieldset: service
  short: Current state of the service.
  type: keyword
service.origin.type:
  dashed_name: service-origin-type
  description: 'The type of the service data is collected from.

    The type can be used to group and correlate logs and metrics from one service
    type.

    Example: If logs or metrics are collected from Elasticsearch, `service.type` would
    be `elasticsearch`.'
  example: elasticsearch
  flat_name: service.origin.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  original_fieldset: service
  short: The type of the service.
  type: keyword
service.origin.version:
  dashed_name: service-origin-version
  description: 'Version of the service the data was collected from.

    This allows to look at a data set only for a specific version of a service.'
  example: 3.2.4
  flat_name: service.origin.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  original_fieldset: service
  short: Version of the service.
  type: keyword
service.state:
  dashed_name: service-state
  description: Current state of the service.
  flat_name: service.state
  ignore_above: 1024
  level: core
  name: state
  normalize: []
  short: Current state of the service.
  type: keyword
service.target.address:
  dashed_name: service-target-address
  description: 'Address where data about this service was collected from.

    This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource
    path (sockets).'
  example: 172.26.0.2:5432
  flat_name: service.target.address
  ignore_above: 1024
  level: extended
  name: address
  normalize: []
  original_fieldset: service
  short: Address of this service.
  type: keyword
service.target.environment:
  beta: This field is beta and subject to change.
  dashed_name: service-target-environment
  description: 'Identifies the environment where the service is running.

    If the same service runs in different environments (production, staging, QA, development,
    etc.), the environment can identify other instances of the same service. Can also
    group services and applications from the same environment.'
  example: production
  flat_name: service.target.environment
  ignore_above: 1024
  level: extended
  name: environment
  normalize: []
  original_fieldset: service
  short: Environment of the service.
  type: keyword
service.target.ephemeral_id:
  dashed_name: service-target-ephemeral-id
  description: 'Ephemeral identifier of this service (if one exists).

    This id normally changes across restarts, but `service.id` does not.'
  example: 8a4f500f
  flat_name: service.target.ephemeral_id
  ignore_above: 1024
  level: extended
  name: ephemeral_id
  normalize: []
  original_fieldset: service
  short: Ephemeral identifier of this service.
  type: keyword
service.target.id:
  dashed_name: service-target-id
  description: 'Unique identifier of the running service. If the service is comprised
    of many nodes, the `service.id` should be the same for all nodes.

    This id should uniquely identify the service. This makes it possible to correlate
    logs and metrics for one specific service, no matter which particular node emitted
    the event.

    Note that if you need to see the events from one specific host of the service,
    you should filter on that `host.name` or `host.id` instead.'
  example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6
  flat_name: service.target.id
  ignore_above: 1024
  level: core
  name: id
  normalize: []
  original_fieldset: service
  short: Unique identifier of the running service.
  type: keyword
service.target.name:
  dashed_name: service-target-name
  description: 'Name of the service data is collected from.

    The name of the service is normally user given. This allows for distributed services
    that run on multiple hosts to correlate the related instances based on the name.

    In the case of Elasticsearch the `service.name` could contain the cluster name.
    For Beats the `service.name` is by default a copy of the `service.type` field
    if no name is specified.'
  example: elasticsearch-metrics
  flat_name: service.target.name
  ignore_above: 1024
  level: core
  name: name
  normalize: []
  original_fieldset: service
  short: Name of the service.
  type: keyword
service.target.node.name:
  dashed_name: service-target-node-name
  description: 'Name of a service node.

    This allows for two nodes of the same service running on the same host to be differentiated.
    Therefore, `service.node.name` should typically be unique across nodes of a given
    service.

    In the case of Elasticsearch, the `service.node.name` could contain the unique
    node name within the Elasticsearch cluster. In cases where the service doesn''t
    have the concept of a node name, the host name or container name can be used to
    distinguish running instances that make up this service. If those do not provide
    uniqueness (e.g. multiple instances of the service running on the same host) -
    the node name can be manually set.'
  example: instance-0000000016
  flat_name: service.target.node.name
  ignore_above: 1024
  level: extended
  name: node.name
  normalize: []
  original_fieldset: service
  short: Name of the service node.
  type: keyword
service.target.state:
  dashed_name: service-target-state
  description: Current state of the service.
  flat_name: service.target.state
  ignore_above: 1024
  level: core
  name: state
  normalize: []
  original_fieldset: service
  short: Current state of the service.
  type: keyword
service.target.type:
  dashed_name: service-target-type
  description: 'The type of the service data is collected from.

    The type can be used to group and correlate logs and metrics from one service
    type.

    Example: If logs or metrics are collected from Elasticsearch, `service.type` would
    be `elasticsearch`.'
  example: elasticsearch
  flat_name: service.target.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  original_fieldset: service
  short: The type of the service.
  type: keyword
service.target.version:
  dashed_name: service-target-version
  description: 'Version of the service the data was collected from.

    This allows to look at a data set only for a specific version of a service.'
  example: 3.2.4
  flat_name: service.target.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  original_fieldset: service
  short: Version of the service.
  type: keyword
service.type:
  dashed_name: service-type
  description: 'The type of the service data is collected from.

    The type can be used to group and correlate logs and metrics from one service
    type.

    Example: If logs or metrics are collected from Elasticsearch, `service.type` would
    be `elasticsearch`.'
  example: elasticsearch
  flat_name: service.type
  ignore_above: 1024
  level: core
  name: type
  normalize: []
  short: The type of the service.
  type: keyword
service.version:
  dashed_name: service-version
  description: 'Version of the service the data was collected from.

    This allows to look at a data set only for a specific version of a service.'
  example: 3.2.4
  flat_name: service.version
  ignore_above: 1024
  level: core
  name: version
  normalize: []
  short: Version of the service.
  type: keyword
tags:
  dashed_name: tags
  description: List of keywords used to tag each event.
  example: '["production", "env2"]'
  flat_name: tags
  ignore_above: 1024
  level: core
  name: tags
  normalize:
  - array
  short: List of keywords used to tag each event.
  type: keyword
